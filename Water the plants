#include <algorithm>
#include <climits>

class Solution {
public:
    int min_sprinklers(int gallery[], int n) {
        const int INF = INT_MAX;
        
        // Create an array to represent the coverage of each position
        int coverage[n];
        for (int i = 0; i < n; ++i) {
            coverage[i] = -1;  // Initialize coverage to -1 (not covered)
        }

        // Populate the coverage array based on the sprinkler ranges
        for (int i = 0; i < n; ++i) {
            if (gallery[i] != -1) {
                int left = std::max(0, i - gallery[i]);
                int right = std::min(n - 1, i + gallery[i]);
                for (int j = left; j <= right; ++j) {
                    coverage[j] = std::max(coverage[j], right);
                }
            }
        }

        // Count the number of sprinklers needed
        int count = 0;
        int curr_end = -1;

        for (int i = 0; i < n; ++i) {
            if (coverage[i] == -1) {
                return -1;  // It's not possible to cover the entire gallery
            }

            if (i > curr_end) {
                ++count;
                curr_end = coverage[i];
            }
        }

        return count;
    }
};

..... see less

0

0
Reply
User
Kunal Mukeshbhai Gandhi
82 minutes ago

Java Solution

class Solution
{
    int min_sprinklers(int gallery[], int n) {
        int[][] rangeArray = new int[n][2];

        for(int index=0; index < n; index++) {
            
            if(gallery[index] == -1)
                continue;
                
            rangeArray[index][0] = index - gallery[index];
            if(rangeArray[index][0] < 0)
                rangeArray[index][0] = 0;

            rangeArray[index][1] = index + gallery[index];
            if(rangeArray[index][1] >= n)
                rangeArray[index][1] = n;
        }
        
       Arrays.sort(rangeArray, (a1,a2) -> a1[0] == a2[0] ? a2[1] - a1[1] : a1[0]-a2[0]);  

        int start=0, index=0, answer=0;
        int currentMax=Integer.MIN_VALUE;

        while(start < n) {

            while(index < n) {

                if(rangeArray[index][0] > start)
                    break;

                currentMax=Math.max(currentMax, rangeArray[index][1]);
                index++;
            }

            if(currentMax < start)
                return -1;

            answer++;
            start=currentMax+1;

        }

        return answer;
    }
}

..... see more

0

0
Reply
User
Sagar ray
3 hours ago

DP  &&  ITERATIVE  APPROACHES
1 DP
RECURSION (TLE)

//RECURSION
class Solution{
    public:
    int help(int* g,int i,int& n,int cnt)
    {
        //base case
        if(i>=n)
        {
            if(cnt>=1)
            return 1e9;
            else
            return 0;
        }
        
        //recursive calls
        //small calculation
        if(g[i]==-1)
        return help(g,i+1,n,cnt+1);
        
        int a,b;
        a=b=1e9;
        
        a=help(g,i+1,n,cnt+1);
        
        if(g[i]>=cnt)
        b=1+help(g,i+g[i]+1,n,0);
        
        return min(a,b);
    }
    int min_sprinklers(int gallery[], int n)
    {
        int ans=help(gallery,0,n,0);
        if(ans>=1e9)
        return -1;
        else
        return ans;
    }
};
MEMOIZATION (TLE)

//MEMOIZATION
class Solution{
    public:
    int help(int* g,int i,int& n,int cnt,vector<vector<int>>& memo)
    {
        //base case
        if(i>=n)
        {
            if(cnt>=1)
            return 1e9;
            else
            return 0;
        }
        
        //memo check
        if(memo[i][cnt]!=-1)
        return memo[i][cnt];
        
        //recursive calls
        //small calculation
        if(g[i]==-1)
        return memo[i][cnt]=help(g,i+1,n,cnt+1,memo);
        
        int a,b;
        a=b=1e9;
        
        a=help(g,i+1,n,cnt+1,memo);
        
        if(g[i]>=cnt)
        b=1+help(g,i+g[i]+1,n,0,memo);
        
        return memo[i][cnt]=min(a,b);
    }
    int min_sprinklers(int gallery[], int n)
    {
        vector<vector<int>> memo(n+1,vector<int>(n+1,-1));
        int ans=help(gallery,0,n,0,memo);
        
        return ans>=1e9 ? -1:ans;
    }
};
TABULATION (TLE)

//TABULATION
class Solution{
    public:
    int min_sprinklers(int gallery[], int n)
    {
        vector<vector<int>> dp(n+1,vector<int>(n+1,1e9));

        for(int i=n-1;i>=0;i--)
        {
            for(int j=0;j<=n;j++)
            {
                if(gallery[i]==-1)
                {
                    if(i+1<n)
                    dp[i][j]=dp[i+1][j+1];
                    else
                    dp[i][j]=1e9;
                    
                    continue;
                }
                int a,b;
                a=b=1e9;
                
                if(i+1<n)
                a=dp[i+1][j+1];
                
                if(gallery[i]>=j)
                {
                    if((i+gallery[i]+1)<n)
                    b=1+dp[i+gallery[i]+1][0];
                    else
                    b=1;
                }
                
                dp[i][j]=min(a,b);
            }
        }
        
        return dp[0][0]>=1e9 ? -1:dp[0][0];
    }
};
2 ITERATIVE (ACCEPTED)
//OPTIMIZED
class Solution{
    public:
    int min_sprinklers(int gallery[], int n)
    {
        vector<pair<int,int>> spk;
        for(int i=0;i<n;i++)
        {
            if(gallery[i]!=-1)
            spk.push_back({ max(0, i-gallery[i]), min(n-1, i+gallery[i])});
        }
        
        sort(spk.begin(),spk.end());
        
        
        int start=0;
        int i=0;
        int ans=0;
        
        while(start<n)
        {
            int maxr=-1e9;
            while(i<spk.size())
            {
                if(spk[i].first>start)
                break;
                
                maxr=max(maxr,spk[i].second);
                i++;
            }
            
            if(maxr<start)
            return -1;
            
            ans++;
            start=maxr+1;
        }
        
        return ans;
    }
};
GITHUB -   https://github.com/roy7077
LINKEDIN- https://www.linkedin.com/in/sagar-ray-3a6297225/
If you found this helpful, kindly consider upvoting. Have a great time coding, my friend!
..... see more

6

0
Reply
User
Divya Ratna
4 hours ago

c++ solution 

class Solution{
    public:
    int min_sprinklers(int gallery[], int n){
        // code here
        vector<pair<int,int>> range;
        for(int i=0;i<n;i++){
            if(gallery[i]!=-1)
                range.push_back({max(0,i-gallery[i]),min(n-1,i+gallery[i])});
        }
        sort(range.begin(),range.end());
        int x=0,ans=0,i=0,cur=0;
        while(x<=n-1){
            cur=INT_MIN;
            while(i<range.size() && range[i].first<=x){
                cur=max(cur,range[i].second);
                i++;
            }
            if(cur==INT_MIN)
                return -1;
            ans++;
            x=cur+1;
        }
        return ans;
    }
};
 

..... see more

0

0
Reply
User
Goutam Kumar Nayak
4 hours ago

  vector<long long int> jump(n, -1);
        for(int i = 0; i < n; i++){
            long long int x = max(0, i-gallery[i]), y = min(n-1, i+gallery[i]);
            jump[x] = max(jump[x], y);
        }

        int res = 0;
        long long int max_reachable = -1;
        for(int i = 0; i < n; res += 1){
            long long int dist = max(jump[i], max_reachable);
            if(dist < 0 or res > n) return -1;
            if(dist >= n) return res;
            for(; i <= dist and i < n; i++){
                if(jump[i] > 0) max_reachable = max(max_reachable, jump[i]);
            }
            dist = max_reachable;
        }
        return res;
tc = 0(n2)

..... see more

1

0
Reply
User
Arunesh Kumar gupta
4 hours ago

https://youtu.be/bB67c0mLSN8?si=P91fBM98j0J7SviB

Best explanation video. MUST Watch.


0

0
Reply
User
Kin Lui
4 hours ago

Python Solution with thought process. Stack.

1.) As we iterate through the sprinklers from 0 to n-1, we don't know if we should keep the current sprinkler or not, because we don't know if there are any future sprinklers which will cover current sprinkler's area.  What to do? Use stack!

2.) What to put in the stack? I find it helpful to put the range of the sprinkler [i-gallery[i],i+gallery[i]] into the stack. Watch out not to go below zero or go over n-1.

3.) Then check to see if the current sprinkler AND THE SECOND LAST sprinkler in stack (if available) together can cover the area of the last sprinkler in the stack. If so, remove last sprinkler from stack. We don't need the redundant sprinkler. If not, keep the last sprinkler.

4.) Check if the last sprinkler completely covers the area of the current sprinkler. If so, we don't need the current sprinkler. If not, add current sprinkler to stack.

5.) Iterate through the list of sprinklers.  We can check if there is any gaps in the area by looking at the sprinklers' ranges inside stack. If there is gap, return -1. If no gap, return the length of the stack (i.e. the minimum number of sprinklers).

Please upvote if helpful :)

    def min_sprinklers(self, gallery, n):
        st=[]
        for i in range(n):
            if gallery[i]!=-1:
                cur=[max(0,i-gallery[i]),min(n-1,i+gallery[i])]
                while len(st)>0:
                    com=cur[:]
                    if len(st)>1 and st[-2][1]>=cur[0]-1:
                        com[0]=st[-2][0]
                    if st[-1][0]>=com[0] and st[-1][1]<=com[1]:
                        st.pop()
                    else:
                        break
                if len(st)==0 or not(cur[0]>=st[-1][0] and cur[1]<=st[-1][1]):
                    st.append(cur)
                    
        if st[0][0]!=0 or st[-1][1]<n-1:
            return -1
        for i in range(1,len(st)):
            if st[i][0]-st[i-1][1]-1>0:
                return -1
        return len(st)

..... see more

1

0
Reply
User
mdshahnawaaz
5 hours ago

int min_sprinklers(int gallery[], int n)
    {
        // code here
        vector<pair<int,int>>v;
        for(int i=0;i<n;i++)
        {
            if(gallery[i]==-1)
            continue;
            int h=i-gallery[i];
            if(h<0)
            {
                h=0;
            }
            int k=gallery[i]+i;
            if(gallery[i]+i>=n)
             k=n-1;
            v.push_back({h,k});
        }
        sort(v.begin(),v.end());
                     int start=0, i=0, ans=0;
             while(start<n)

             {
                 int mx=INT_MIN;
                 while(i<v.size())
                 {
                     if(v[i].first>start)
                     break;
                     mx=max(mx, v[i].second);
                     i++;
                 }
                 if(mx<start)
                 return -1;
                 ans++;
                 start=mx+1;
             }
             return ans;


                 //return count+1;
    }

 

..... see more

0

0
Reply
User
Rahul Sharma
5 hours ago

temp=sorted([(i-g,i+g) for i,g in enumerate(gallery) if g!=-1],reverse=True)
        a,b,c=0,0,0
        while a<n:
            if temp and temp[-1][0] <= a:
                s,e=temp.pop()
                b=max(b,e+1)
            elif b > a:
                a=b
                c +=1
            else:
                return -1
        return c

..... see more

0

0
Reply
User
Udit
5 hours ago

Python: 

class Solution:
    def min_sprinklers(self, gallery, n):
        intervals = sorted([(i-g, i+g) for i, g in enumerate(gallery) if g != -1], reverse=True)
        reachable, best, res = 0, 0, 0
     
        while reachable < n:
            if intervals and intervals[-1][0] <= reachable:
                s, e = intervals.pop()
                best = max(best, e+1)
            elif best > reachable:
                reachable = best
                res += 1
            else:
                return -1
        return res
 

..... see more

0

0
Reply
User
CodeTav Management
6 hours ago

GFG Discussion || JAVA

https://youtu.be/CVJia5937OE


1

0
Reply
User
TARUN Kumar
6 hours ago

https://www.youtube.com/watch?v=vHnm8zmaf_0

 


0

1
Reply
User
Snehil Chourasiya
6 hours ago

C++ Solution

 

class Solution{
    public:
    int min_sprinklers(int gallery[], int n)
    {
        // code here
        vector<long long int> jump(n, -1);
        for(int i = 0; i < n; i++){
            long long int x = max(0, i-gallery[i]), y = min(n-1, i+gallery[i]);
            jump[x] = max(jump[x], y);
        }

        int res = 0;
        long long int max_reachable = -1;
        for(int i = 0; i < n; res += 1){
            long long int dist = max(jump[i], max_reachable);
            if(dist < 0 or res > n) return -1;
            if(dist >= n) return res;
            for(; i <= dist and i < n; i++){
                if(jump[i] > 0) max_reachable = max(max_reachable, jump[i]);
            }
            dist = max_reachable;
        }
        return res;
    }
};

..... see more

1

0
Reply
(Show 2 Replies)
Load More Comments
C++ (g++ 5.4)




Custom Input
fab_icon
